{"version":3,"sources":["../../../.tmp-es/components/icon/index.jsx"],"names":["React","PropTypes","classNames","UtilityIcon","ICON","Icon","assistiveText","category","className","containerClassName","icon","inverse","name","path","size","style","title","kababCaseName","replace","displayName","propTypes","string","oneOf","isRequired","oneOfType","array","object","colorVariant","bool","defaultProps"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Icon Component\n\n// Based on SLDS v2.1.0-rc.4\n\n// ## Dependencies\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// A simple javascript utility for conditionally joining classNames together.\nimport classNames from '../../utilities/class-names';\n\n// ## Children\nimport UtilityIcon from '../utilities/utility-icon';\n\n// ## Constants\nimport { ICON } from '../../utilities/constants';\n\n/**\n * The Icon component is the Lightning Design System Icon component and should be used for naked icons. For icons that are buttons, use the <a href='/components/buttons/'>Button component</a> component with <code>variant='icon'</code>.\n */\nconst Icon = ({\n\tassistiveText,\n\tcategory,\n\tclassName,\n\tcontainerClassName,\n\ticon,\n\tinverse,\n\tname,\n\tpath,\n\tsize,\n\tstyle,\n\ttitle\n}) => {\n\tconst kababCaseName = name ? name.replace(/_/g, '-') : '';\n\n\treturn (\n\t\t<span\n\t\t\tclassName={classNames(\n\t\t\t\t{\n\t\t\t\t\t'slds-icon_container': category !== 'utility',\n\t\t\t\t\t'slds-icon_container--circle': category === 'action',\n\t\t\t\t\t[`slds-icon-${category}-${kababCaseName}`]:\n\t\t\t\t\t\tcategory !== 'utility' && category !== 'doctype' && !path\n\t\t\t\t},\n\t\t\t\tcontainerClassName\n\t\t\t)}\n\t\t\ttitle={title}\n\t\t>\n\t\t\t<UtilityIcon\n\t\t\t\taria-hidden=\"true\"\n\t\t\t\tcategory={category}\n\t\t\t\tclassName={classNames(className, 'slds-icon', {\n\t\t\t\t\t'slds-icon--xx-small': size === 'xx-small',\n\t\t\t\t\t'slds-icon--x-small': size === 'x-small',\n\t\t\t\t\t'slds-icon--small': size === 'small',\n\t\t\t\t\t// medium intentially not present\n\t\t\t\t\t'slds-icon--large': size === 'large',\n\t\t\t\t\t// if category is `utility` and `inverse` is false (default), icon will be dark // return true\n\t\t\t\t\t// if category is `utility` and `inverse` is true, icon will be light // return false\n\t\t\t\t\t// if category is NOT `utility` and `inverse` is false (default), icon will be light // return false\n\t\t\t\t\t// if category is NOT `utility` and `inverse` is true, icon will be dark // return true\n\t\t\t\t\t'slds-icon-text-default': category === 'utility' ? !inverse : inverse\n\t\t\t\t})}\n\t\t\t\ticon={icon}\n\t\t\t\tname={name}\n\t\t\t\tpath={path}\n\t\t\t\tstyle={style}\n\t\t\t/>\n\t\t\t{assistiveText ? (\n\t\t\t\t<span className=\"slds-assistive-text\">{assistiveText}</span>\n\t\t\t) : (\n\t\t\t\t''\n\t\t\t)}\n\t\t</span>\n\t);\n};\n\n// ### Display Name\n// Always use the canonical component name as the React display name.\nIcon.displayName = ICON;\n\n// ### Prop Types\nIcon.propTypes = {\n\t/**\n\t * Text that is visually hidden but read aloud by screenreaders to tell the user what the icon means.\n\t * Naked icons must have assistive text, however, if you also have visible descriptive text with the icon,\n\t * declare this prop as <code>assistiveText=''</code>.\n\t */\n\tassistiveText: PropTypes.string,\n\t/**\n\t * Icon category from [lightningdesignsystem.com/icons/](https://www.lightningdesignsystem.com/icons/)\n\t */\n\tcategory: PropTypes.oneOf([\n\t\t'action',\n\t\t'custom',\n\t\t'doctype',\n\t\t'standard',\n\t\t'utility'\n\t]).isRequired,\n\t/**\n\t * CSS classes that are applied to the SVG.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string\n\t]),\n\t/**\n\t * CSS classes that are applied to the span.\n\t */\n\tcontainerClassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string\n\t]),\n\t/**\n\t * Icon color variants\n\t */\n\tcolorVariant: PropTypes.oneOf(['base', 'default', 'error', 'warning']),\n\t/**\n\t * A custom SVG object to use instead of the supplied SLDS icons, look in `design-system-react/icons` for examples and syntax.\n\t */\n\ticon: PropTypes.object,\n\t/**\n\t * Setting `inverse` to true will switch the color of the icon: light to dark, dark to light.\n\t */\n\tinverse: PropTypes.bool,\n\t/**\n\t * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to reference icon names.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * Path to the icon. This will override any global icon settings\n\t */\n\tpath: PropTypes.string,\n\t/**\n\t * Size of the icon. Visit [lightningdesignsystem.com/components/icons/#flavor-sizes](https://www.lightningdesignsystem.com/components/icons/#flavor-sizes)\n\t */\n\tsize: PropTypes.oneOf(['xx-small', 'x-small', 'small', 'medium', 'large']),\n\t/**\n\t * Custom styles to be passed to the SVG. Could be used to change icon or background color.\n\t */\n\tstyle: PropTypes.object,\n\t/**\n\t * Title attribute for the icon container\n\t */\n\ttitle: PropTypes.string\n};\n\nIcon.defaultProps = {\n\tcategory: 'standard',\n\tsize: 'medium'\n};\n\nexport default Icon;\n"],"file":"index.js"}
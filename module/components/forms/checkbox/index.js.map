{"version":3,"sources":["../../../../.tmp-es/components/forms/checkbox/index.jsx"],"names":["React","createReactClass","PropTypes","isFunction","classNames","shortid","KEYS","EventUtil","checkProps","FORMS_CHECKBOX","Checkbox","displayName","propTypes","string","bool","assistiveText","checked","defaultChecked","className","oneOfType","array","object","disabled","errorText","id","indeterminate","label","labelToggleEnabled","labelToggleDisabled","name","onBlur","func","onChange","onFocus","onKeyDown","onKeyPress","onKeyUp","readOnly","required","role","variant","oneOf","getDefaultProps","componentWillMount","props","generatedId","generate","getId","handleChange","event","value","target","handleKeyDown","keyCode","ENTER","SPACE","trapImmediate","renderButtonGroupVariant","component","input","renderBaseVariant","renderToggleVariant","render","renderer"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Checkbox Component\n\n// Implements the [Checkbox design pattern](https://www.lightningdesignsystem.com/components/forms/#checkbox) in React.\n\n// ### React\nimport React from 'react';\nimport createReactClass from 'create-react-class';\nimport PropTypes from 'prop-types';\n\n// ### isFunction\nimport isFunction from 'lodash.isfunction';\n\n// ### classNames\nimport classNames from 'classnames';\n\n// ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\nimport shortid from 'shortid';\n\n// ### Event Helpers\nimport KEYS from '../../../utilities/key-code';\nimport EventUtil from '../../../utilities/event';\n\n// This component's `checkProps` which issues warnings to developers about properties when in development mode (similar to React's built in development tools)\nimport checkProps from './check-props';\n\nimport { FORMS_CHECKBOX } from '../../../utilities/constants';\n\n/**\n * The ability to style checkboxes with CSS varies across browsers. Using this component ensures checkboxes look the same everywhere.\n */\nconst Checkbox = createReactClass({\n\t// ### Display Name\n\t// Always use the canonical component name as the React display name.\n\tdisplayName: FORMS_CHECKBOX,\n\n\t// ### Prop Types\n\tpropTypes: {\n\t\t/**\n\t\t * An HTML ID that is shared with ARIA-supported devices with the\n\t\t * `aria-controls` attribute in order to relate the input with\n\t\t * another region of the page. An example would be a select box\n\t\t * that shows or hides a panel.\n\t\t */\n\t\t'aria-controls': PropTypes.string,\n\t\t/**\n\t\t * The `aria-describedby` attribute is used to indicate the IDs of the elements that describe the object. It is used to establish a relationship between widgets or groups and text that described them. This is very similar to aria-labelledby: a label describes the essence of an object, while a description provides more information that the user might need.\n\t\t */\n\t\t'aria-describedby': PropTypes.string,\n\t\t/**\n\t\t * `aria-owns` indicate that an element depends on the current one when the relation can't be determined by the hierarchy structure.\n\t\t */\n\t\t'aria-owns': PropTypes.string,\n\t\t/**\n\t\t * The `aria-required` attribute is used to indicate that user input is required on an element before a form can be submitted.\n\t\t */\n\t\t'aria-required': PropTypes.bool,\n\t\t/**\n\t\t * Text that is visually hidden but read aloud by screenreaders to tell the user what the Checkbox is for.\n\t\t * If the Checkbox has a visible label, you can omit the <code>assistiveText</code> prop and use the <code>label</code> prop.\n\t\t */\n\t\tassistiveText: PropTypes.string,\n\t\t/**\n\t\t * The Checkbox is a controlled component, and will always be in this state. If checked is not defined, the state of the uncontrolled native `input` component will be used.\n\t\t */\n\t\tchecked: PropTypes.bool,\n\t\t/**\n\t\t * This is the initial value of an uncontrolled form element and is present only to provide compatibility with\n\t\t * hybrid framework applications that are not entirely React. It should only be used in an application without\n\t\t * centralized state (Redux, Flux). \"Controlled components\" with centralized state is highly recommended.\n\t\t * See [Code Overview](https://github.com/salesforce/design-system-react/blob/master/docs/codebase-overview.md#controlled-and-uncontrolled-components) for more information.\n\t\t */\n\t\tdefaultChecked: PropTypes.bool,\n\t\t/**\n\t\t * Class names to be added to the outer container of the Checkbox.\n\t\t */\n\t\tclassName: PropTypes.oneOfType([\n\t\t\tPropTypes.array,\n\t\t\tPropTypes.object,\n\t\t\tPropTypes.string,\n\t\t]),\n\t\t/**\n\t\t * Disables the Checkbox and prevents clicking it.\n\t\t */\n\t\tdisabled: PropTypes.bool,\n\t\t/**\n\t\t * Message to display when the Checkbox is in an error state. When this is present, also visually highlights the component as in error.\n\t\t */\n\t\terrorText: PropTypes.string,\n\t\t/**\n\t\t * A unique ID is needed in order to support keyboard navigation and ARIA support. This ID is added to the `input` element\n\t\t */\n\t\tid: PropTypes.string,\n\t\t/**\n\t\t * The Checkbox will be indeterminate if its state can not be figured out or is partially checked. Once a checkbox is indeterminate, a click should cause it to be checked. Since a user cannot put a checkbox into an indeterminate state, it is assumed you are controlling the value of `checked` with the parent, also, and that this is a controlled component. **Note:** `indeterminate` proptype does nothing in the `toggle` variant, as [SLDS does not support it](https://lightningdesignsystem.com/components/forms/#flavor-checkbox-toggle-checkbox-toggle).\n\t\t */\n\t\tindeterminate: PropTypes.bool,\n\t\t/**\n\t\t * An optional label for the Checkbox.\n\t\t */\n\t\tlabel: PropTypes.string,\n\t\t/**\n\t\t * Label for the _enabled_ state of the Toggle variant. Defaults to \"Enabled\".\n\t\t */\n\t\tlabelToggleEnabled: PropTypes.string,\n\t\t/**\n\t\t * Label for the _disabled_ state of the Toggle variant. Defaults to \"Disabled\". Note that this uses SLDS language, and meaning, of \"Enabled\" and \"Disabled\"; referring to the state of whatever the checkbox is _toggling_, not whether the checkbox itself is enabled or disabled.\n\t\t */\n\t\tlabelToggleDisabled: PropTypes.string,\n\t\t/**\n\t\t * Name of the submitted form parameter.\n\t\t */\n\t\tname: PropTypes.string,\n\t\t/**\n\t\t * This event fires when the Checkbox focused is blurred.\n\t\t */\n\t\tonBlur: PropTypes.func,\n\t\t/**\n\t\t * This event fires when the Checkbox changes.\n\t\t */\n\t\tonChange: PropTypes.func,\n\t\t/**\n\t\t * This event fires when the Checkbox is focused.\n\t\t */\n\t\tonFocus: PropTypes.func,\n\t\t/**\n\t\t * This event fires when a key is pressed down.\n\t\t */\n\t\tonKeyDown: PropTypes.func,\n\t\t/**\n\t\t * This event fires when a character is typed. Probably. 👀 See [this article](http://www.bloggingdeveloper.com/post/KeyPress-KeyDown-KeyUp-The-Difference-Between-Javascript-Key-Events.aspx) for more information.\n\t\t */\n\t\tonKeyPress: PropTypes.func,\n\t\t/**\n\t\t * This event fires when a pressed key is released.\n\t\t */\n\t\tonKeyUp: PropTypes.func,\n\t\t/**\n\t\t * Displays the value of the input, but does not allow changes.\n\t\t */\n\t\treadOnly: PropTypes.bool,\n\t\t/**\n\t\t * Highlights the Checkbox as a required field (does not perform any validation).\n\t\t */\n\t\trequired: PropTypes.bool,\n\t\t/**\n\t\t * The aria-role of the checkbox.\n\t\t */\n\t\trole: PropTypes.string,\n\t\t/**\n\t\t * Which flavor of checkbox? Default is `base` while other option is `toggle`. (**Note:** `toggle` variant does not support the `indeterminate` feature, because [SLDS does not support it](https://lightningdesignsystem.com/components/forms/#flavor-checkbox-toggle-checkbox-toggle).)\n\t\t */\n\t\tvariant: PropTypes.oneOf(['base', 'toggle', 'button-group']),\n\t},\n\n\tgetDefaultProps () {\n\t\treturn {\n\t\t\tvariant: 'base',\n\t\t\tlabelToggleEnabled: 'Enabled',\n\t\t\tlabelToggleDisabled: 'Disabled',\n\t\t};\n\t},\n\n\tcomponentWillMount () {\n\t\tcheckProps(FORMS_CHECKBOX, this.props);\n\t\tthis.generatedId = shortid.generate();\n\t},\n\n\tgetId () {\n\t\treturn this.props.id || this.generatedId;\n\t},\n\n\thandleChange (event) {\n\t\tconst value = event.target.checked;\n\t\tconst { checked, indeterminate, onChange } = this.props;\n\n\t\tif (isFunction(onChange)) {\n\t\t\t// `checked` is present twice to maintain backwards compatibility. Please remove first parameter `value` on the next breaking change.\n\t\t\tonChange(value, event, {\n\t\t\t\tchecked: indeterminate ? true : !checked,\n\t\t\t\tindeterminate: false,\n\t\t\t});\n\t\t}\n\t},\n\n\thandleKeyDown (event) {\n\t\tif (event.keyCode) {\n\t\t\tif (event.keyCode === KEYS.ENTER || event.keyCode === KEYS.SPACE) {\n\t\t\t\tEventUtil.trapImmediate(event);\n\t\t\t\tthis.handleChange(event);\n\t\t\t}\n\t\t}\n\t},\n\n\trenderButtonGroupVariant (props) {\n\t\treturn (\n\t\t\t<span className=\"slds-button slds-checkbox--button\">\n\t\t\t\t<input\n\t\t\t\t\taria-controls={this.props['aria-controls']}\n\t\t\t\t\taria-describedby={this.props['aria-describedby']}\n\t\t\t\t\taria-owns={this.props['aria-owns']}\n\t\t\t\t\taria-required={this.props['aria-required']}\n\t\t\t\t\tdisabled={props.disabled}\n\t\t\t\t\tchecked={props.checked}\n\t\t\t\t\tdefaultChecked={props.defaultChecked}\n\t\t\t\t\tid={this.getId()}\n\t\t\t\t\tname={props.name}\n\t\t\t\t\tonBlur={props.onBlur}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\tonFocus={props.onFocus}\n\t\t\t\t\tonKeyDown={props.onKeyDown}\n\t\t\t\t\tonKeyPress={props.onKeyPress}\n\t\t\t\t\tonKeyUp={props.onKeyUp}\n\t\t\t\t\tref={(component) => {\n\t\t\t\t\t\tthis.input = component;\n\t\t\t\t\t}}\n\t\t\t\t\trole={props.role}\n\t\t\t\t\trequired={props.required}\n\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t/>\n\t\t\t\t<label className=\"slds-checkbox--button__label\" htmlFor={this.getId()}>\n\t\t\t\t\t<span className=\"slds-checkbox--faux\">{props.label}</span>\n\t\t\t\t\t{props.assistiveText ? (\n\t\t\t\t\t\t<span className=\"slds-assistive-text\">{props.assistiveText}</span>\n\t\t\t\t\t) : null}\n\t\t\t\t</label>\n\t\t\t</span>\n\t\t);\n\t},\n\n\trenderBaseVariant (props) {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-form-element',\n\t\t\t\t\t{\n\t\t\t\t\t\t'is-required': props.required,\n\t\t\t\t\t\t'slds-has-error': props.errorText,\n\t\t\t\t\t},\n\t\t\t\t\tprops.className\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t<div className=\"slds-form-element__control\">\n\t\t\t\t\t<span className=\"slds-checkbox\">\n\t\t\t\t\t\t{props.required ? (\n\t\t\t\t\t\t\t<abbr className=\"slds-required\" title=\"required\">\n\t\t\t\t\t\t\t\t*\n\t\t\t\t\t\t\t</abbr>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\taria-controls={this.props['aria-controls']}\n\t\t\t\t\t\t\taria-describedby={this.props['aria-describedby']}\n\t\t\t\t\t\t\taria-owns={this.props['aria-owns']}\n\t\t\t\t\t\t\taria-required={this.props['aria-required']}\n\t\t\t\t\t\t\tdisabled={props.disabled}\n\t\t\t\t\t\t\tchecked={props.checked}\n\t\t\t\t\t\t\tdefaultChecked={props.defaultChecked}\n\t\t\t\t\t\t\tid={this.getId()}\n\t\t\t\t\t\t\tname={props.name}\n\t\t\t\t\t\t\tonBlur={props.onBlur}\n\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t\tonFocus={props.onFocus}\n\t\t\t\t\t\t\tonKeyDown={props.onKeyDown}\n\t\t\t\t\t\t\tonKeyPress={props.onKeyPress}\n\t\t\t\t\t\t\tonKeyUp={props.onKeyUp}\n\t\t\t\t\t\t\tref={(component) => {\n\t\t\t\t\t\t\t\tif (component) {\n\t\t\t\t\t\t\t\t\tcomponent.indeterminate = props.indeterminate;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthis.input = component;\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\trole={props.role}\n\t\t\t\t\t\t\trequired={props.required}\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<label className=\"slds-checkbox__label\" htmlFor={this.getId()}>\n\t\t\t\t\t\t\t<span className=\"slds-checkbox--faux\" />\n\t\t\t\t\t\t\t{props.label ? (\n\t\t\t\t\t\t\t\t<span className=\"slds-form-element__label\">{props.label}</span>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t{props.assistiveText ? (\n\t\t\t\t\t\t\t\t<span className=\"slds-assistive-text\">\n\t\t\t\t\t\t\t\t\t{props.assistiveText}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t{props.errorText ? (\n\t\t\t\t\t<div className=\"slds-form-element__help\">{props.errorText}</div>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t);\n\t},\n\n\trenderToggleVariant (props) {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-form-element',\n\t\t\t\t\t{\n\t\t\t\t\t\t'is-required': props.required,\n\t\t\t\t\t\t'slds-has-error': props.errorText,\n\t\t\t\t\t},\n\t\t\t\t\tprops.className\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t<label\n\t\t\t\t\tclassName=\"slds-checkbox--toggle slds-grid\"\n\t\t\t\t\thtmlFor={this.getId()}\n\t\t\t\t>\n\t\t\t\t\t{props.required ? (\n\t\t\t\t\t\t<abbr className=\"slds-required\" title=\"required\">\n\t\t\t\t\t\t\t*\n\t\t\t\t\t\t</abbr>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{props.label ? (\n\t\t\t\t\t\t<span className=\"slds-form-element__label slds-m-bottom--none\">\n\t\t\t\t\t\t\t{props.label}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{props.assistiveText ? (\n\t\t\t\t\t\t<span className=\"slds-assistive-text\">{props.assistiveText}</span>\n\t\t\t\t\t) : null}\n\t\t\t\t\t<input\n\t\t\t\t\t\taria-controls={this.props['aria-controls']}\n\t\t\t\t\t\taria-describedby={`${this.getId()}-desc`}\n\t\t\t\t\t\taria-owns={this.props['aria-owns']}\n\t\t\t\t\t\taria-required={this.props['aria-required']}\n\t\t\t\t\t\tdisabled={props.disabled}\n\t\t\t\t\t\tid={this.getId()}\n\t\t\t\t\t\tchecked={props.checked}\n\t\t\t\t\t\tdefaultChecked={props.defaultChecked}\n\t\t\t\t\t\tname={props.name}\n\t\t\t\t\t\tonBlur={props.onBlur}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tonFocus={props.onFocus}\n\t\t\t\t\t\tonKeyDown={props.onKeyDown}\n\t\t\t\t\t\tonKeyPress={props.onKeyPress}\n\t\t\t\t\t\tonKeyUp={props.onKeyUp}\n\t\t\t\t\t\tref={(component) => {\n\t\t\t\t\t\t\tthis.input = component;\n\t\t\t\t\t\t}}\n\t\t\t\t\t\trole={props.role}\n\t\t\t\t\t\trequired={props.required}\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t/>\n\t\t\t\t\t<span\n\t\t\t\t\t\tid={`${this.getId()}-desc`}\n\t\t\t\t\t\tclassName=\"slds-checkbox--faux_container\"\n\t\t\t\t\t\taria-live=\"assertive\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<span className=\"slds-checkbox--faux\" />\n\t\t\t\t\t\t<span className=\"slds-checkbox--on\">\n\t\t\t\t\t\t\t{props.labelToggleEnabled}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"slds-checkbox--off\">\n\t\t\t\t\t\t\t{props.labelToggleDisabled}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</span>\n\t\t\t\t</label>\n\t\t\t\t{props.errorText ? (\n\t\t\t\t\t<div className=\"slds-form-element__help\">{props.errorText}</div>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t);\n\t},\n\n\t// ### Render\n\trender () {\n\t\tlet renderer;\n\t\tswitch (this.props.variant) {\n\t\t\tcase 'toggle':\n\t\t\t\trenderer = this.renderToggleVariant(this.props);\n\t\t\t\tbreak;\n\t\t\tcase 'button-group':\n\t\t\t\trenderer = this.renderButtonGroupVariant(this.props);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\trenderer = this.renderBaseVariant(this.props);\n\t\t}\n\t\treturn renderer;\n\t},\n});\n\nexport default Checkbox;\n"],"file":"index.js"}
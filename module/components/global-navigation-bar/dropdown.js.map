{"version":3,"sources":["../../../.tmp-es/components/global-navigation-bar/dropdown.jsx"],"names":["React","PropTypes","MenuDropdown","GlobalNavigationTrigger","GLOBAL_NAVIGATION_BAR_DROPDOWN","GlobalNavigationBarDropdown","props","active","activeBackgroundColor","assistiveText","dividerPosition","rest","length","displayName","propTypes","bool","string","isRequired","align","oneOf","className","buttonClassName","oneOfType","array","object","id","offset","onSelect","func","options","defaultProps"],"mappings":";;;;AAAA;;AACA;AAEA;AAEA;AAEA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,uBAAP,MAAoC,oBAApC,C,CAEA;;AACA,SAASC,8BAAT,QAA+C,2BAA/C;AAEA;;;;AAGA,IAAMC,8BAA8B,SAA9BA,2BAA8B,CAACC,KAAD,EAAW;AAC9C;AAD8C,MAG7CC,MAH6C,GAQ1CD,KAR0C,CAG7CC,MAH6C;AAAA,MAI7CC,qBAJ6C,GAQ1CF,KAR0C,CAI7CE,qBAJ6C;AAAA,MAK7CC,aAL6C,GAQ1CH,KAR0C,CAK7CG,aAL6C;AAAA,MAM7CC,eAN6C,GAQ1CJ,KAR0C,CAM7CI,eAN6C;AAAA,MAO1CC,IAP0C,4BAQ1CL,KAR0C;;AAU9C,SACC,oBAAC,YAAD;AACC,WAAM,OADP;AAEC,4BAFD,CAGC;AAHD;AAIC,qBAAiB,GAJlB;AAKC,YAAQA,MAAMM,MALf;AAMC,kBAAa;AANd,KAOKD,IAPL,GASC,oBAAC,uBAAD;AACC,YAAQJ,MADT;AAEC,mBAAeE,aAFhB;AAGC,2BAAuBD,qBAHxB;AAIC,qBAAiBE;AAJlB,IATD,CADD;AAkBA,CA5BD,C,CA8BA;AACA;AACA;;;AACAL,4BAA4BQ,WAA5B,GAA0CT,8BAA1C,C,CAEA;;AACAC,4BAA4BS,SAA5B,GAAwC;AACvC;;;AAGAP,UAAQN,UAAUc,IAJqB;;AAKvC;;;AAGAP,yBAAuBP,UAAUe,MARM;;AASvC;;;AAGAP,iBAAeR,UAAUe,MAAV,CAAiBC,UAZO;;AAavC;;;AAGAC,SAAOjB,UAAUkB,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,CAAhB,CAhBgC;;AAiBvC;;;AAGAC,aAAWnB,UAAUe,MApBkB;;AAqBvC;;;AAGAN,mBAAiBT,UAAUkB,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,CAAhB,CAxBsB;;AAyBvC;;;AAGAE,mBAAiBpB,UAAUqB,SAAV,CAAoB,CACpCrB,UAAUsB,KAD0B,EAEpCtB,UAAUuB,MAF0B,EAGpCvB,UAAUe,MAH0B,CAApB,CA5BsB;;AAiCvC;;;AAGAS,MAAIxB,UAAUe,MApCyB;;AAqCvC;;;AAGAJ,UAAQX,UAAUkB,KAAV,CAAgB,CAAC,IAAD,EAAO,GAAP,EAAY,GAAZ,EAAiB,IAAjB,CAAhB,CAxC+B;;AAyCvC;;;AAGAO,UAAQzB,UAAUe,MA5CqB;;AA6CvC;;;AAGAW,YAAU1B,UAAU2B,IAhDmB;;AAiDvC;;;AAGAC,WAAS5B,UAAUsB,KAAV,CAAgBN;AApDc,CAAxC,C,CAuDA;;AACAZ,4BAA4ByB,YAA5B,GAA2C;AAC1CZ,SAAO,OADmC;AAE1CN,UAAQ;AAFkC,CAA3C;AAKA,eAAeP,2BAAf","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Global Navigation Dropdown Component\n\n// ## Dependencies\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### Dropdown\nimport MenuDropdown from '../menu-dropdown';\nimport GlobalNavigationTrigger from './dropdown-trigger';\n\n// ## Constants\nimport { GLOBAL_NAVIGATION_BAR_DROPDOWN } from '../../utilities/constants';\n\n/**\n * This component is an implementation of `MenuDropdown` with a custom trigger. All the properties listed below are provided to the `MenuDropdown` component. Any additional properties are provided to the Custom Trigger (that is the `Button` or `li` tag).\n */\nconst GlobalNavigationBarDropdown = (props) => {\n\t// Separate props we care about in order to pass others along passively to the dropdown component\n\tconst {\n\t\tactive,\n\t\tactiveBackgroundColor,\n\t\tassistiveText,\n\t\tdividerPosition,\n\t\t...rest\n\t} = props;\n\n\treturn (\n\t\t<MenuDropdown\n\t\t\talign=\"right\"\n\t\t\thasStaticAlignment\n\t\t\t// only need if using hybrid or hover\n\t\t\thoverCloseDelay={400}\n\t\t\tlength={props.length}\n\t\t\tmenuPosition=\"relative\"\n\t\t\t{...rest}\n\t\t>\n\t\t\t<GlobalNavigationTrigger\n\t\t\t\tactive={active}\n\t\t\t\tassistiveText={assistiveText}\n\t\t\t\tactiveBackgroundColor={activeBackgroundColor}\n\t\t\t\tdividerPosition={dividerPosition}\n\t\t\t/>\n\t\t</MenuDropdown>\n\t);\n};\n\n// ### Display Name\n// Always use the canonical component name (set in the core) as the React\n// display name.\nGlobalNavigationBarDropdown.displayName = GLOBAL_NAVIGATION_BAR_DROPDOWN;\n\n// ### Prop Types\nGlobalNavigationBarDropdown.propTypes = {\n\t/**\n\t * Whether the item is active or not.\n\t */\n\tactive: PropTypes.bool,\n\t/**\n\t * Allows alignment of active item with active application background color.\n\t */\n\tactiveBackgroundColor: PropTypes.string,\n\t/**\n\t * Text that is visually hidden but read aloud by screenreaders to tell the user what the icon means.\n\t */\n\tassistiveText: PropTypes.string.isRequired,\n\t/**\n\t * Aligns the right or left side of the menu with the respective side of the trigger. This is not intended for use with `nubbinPosition`.\n\t */\n\talign: PropTypes.oneOf(['left', 'right']),\n\t/**\n\t * Extra classnames to apply to the dropdown menu.\n\t */\n\tclassName: PropTypes.string,\n\t/**\n\t * Determines position of separating bar.\n\t */\n\tdividerPosition: PropTypes.oneOf(['left', 'right']),\n\t/**\n\t * CSS classes to be added to `li` element.\n\t */\n\tbuttonClassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the dropdown to the triggering button.\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * Provided to List to indicate number of items visible in the List. Pass `null` to display all items, or a string containing one of the numeric option values listed under [Dropdown Height](https://www.lightningdesignsystem.com/components/menus/#flavor-dropdown-height) at the right (eg. '5').\n\t */\n\tlength: PropTypes.oneOf([null, '5', '7', '10']),\n\t/**\n\t *  Offset adds pixels to the absolutely positioned dropdown menu in the format: ([vertical]px [horizontal]px).\n\t */\n\toffset: PropTypes.string,\n\t/**\n\t * Triggered when an item in the menu is clicked.\n\t */\n\tonSelect: PropTypes.func,\n\t/**\n\t * An array of menu item.\n\t */\n\toptions: PropTypes.array.isRequired,\n};\n\n// ### Default Props\nGlobalNavigationBarDropdown.defaultProps = {\n\talign: 'right',\n\tlength: null,\n};\n\nexport default GlobalNavigationBarDropdown;\n"],"file":"dropdown.js"}